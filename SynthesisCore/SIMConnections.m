/*   SynthesisCore
 *   by Sean Hill
 *   (c) 2003 All Rights Reserved.
 *   
 */

#import <SynthesisCore/SIMConnections.h>
#import <stdio.h>
#import <Desiderata/NSValueArray.h>

@implementation SIMConnections
/*"
	The abstract superclass for all models of connectivity.  This class (and its
	subclasses) are responsible for generating connections which can be based on
	a set of parameters and/or the position of the cell for which they are being
	generated.
"*/

- (NSValueArray *)connections
/*"
	Returns an array of connections as generated by the receiver.
	Each connection is a structure of the type SIMConnection.  See Simulator.h.
	This is a convenience method for the case where the connections are position
	independent.  It returns connectionsForPosition: with and argument of a cell
	located at (0,0,0).
"*/
{
	SIMPosition aCell;
	aCell.x = 0; aCell.y = 0; aCell.z = 0;
    return [self connectionsForPosition:aCell];
}

- (void)updateParameters
/*"
    Calls [super updateParameters] then releases the template connections.
    See [SIMObject updateParameteres].
"*/
{
    [super updateParameters];

    if(userState.connections){
        [userState.connections release];
		userState.connections = nil;
    }
}


- (NSValueArray *)connectionsForPosition:(SIMPosition)cell
/*"
	Returns the set of connections parameterized for the position of cell.
	Subclasses implement this method to return a customized set of connections.
"*/
{
	return (NSValueArray *)nil;
}

- (NSValueArray *)connectionsTemplate
/*"
	Returns a static set of connections which is normally only updated when a parameter
	has changed.  This is typically used for user-interface purposes as it doesn't
	require recalculating each time the connections are needed for display.  

	If the template doesn't exist (i.e. it has been released within updateParameters:),
	a new template is generated.
"*/

{
    if(!userState.connections)
    	userState.connections = [[self connections] retain];
    return (NSValueArray *)userState.connections;
}

+ (void)logConnections:(NSArray *)array
/*"
    Sends, to the standard output, a series of strings describing the 
	connections in array. The output is in the form:"(x:%n,y:%n,z:%n): strength = %n".
	This may be useful for debugging purposes.
"*/
{
        NSValue *value;
        id	enumerator = [array objectEnumerator];

        while((value = [enumerator nextObject])){
                SIMConnection aConnection;
                [value getValue:&aConnection];
				[self logConnection:&aConnection];
        }
}

+ (void)logConnection:(SIMConnection *)aConnection
/*"
    Sends, to the standard output, a series of strings describing the 
	connections in array. The output is in the form:"(x:%n,y:%n,z:%n): strength = %n".
	This may be useful for debugging purposes.
"*/
{
	fprintf(stdout,"(dx:%d,dy:%d,dz:%d): strength = %f latency = %f nChannels = %d\n",
		aConnection->dx,aConnection->dy,aConnection->dz,aConnection->strength,aConnection->latency,aConnection->channelCount);
}


- (id)initWithCoder:(NSCoder *)coder
/*"
    Initializes a new instance of this class from coder.
"*/
{
    self = [super initWithCoder:coder];

    [self updateParameterValues];

    return self;
}

- (void) encodeWithCoder: (NSCoder *) coder
/*"
    Encodes the current object with coder, see NSCoding.
"*/
{
    [super encodeWithCoder:coder];
}


- (NSString *)iconName
/*"
	Returns the name of an icon ("SIMConnections") to use as a graphical representation
	of this class.
"*/
{
	return @"SIMConnections";
}


@end
